// If unowned or owner has not unlocked the ship part yet.
COMBAT_TARGETS_VISIBLE_ENEMY
'''        Or [        // unowned target, when attacker is owned by an empire, and target is visible to that empire
            And [
                Unowned
                (Source.Owner != LocalCandidate.Owner)
                VisibleToEmpire empire = Source.Owner
            ]
            And [   // target owned by an empire, when attacker is owned by an enemy of the target's owner, and the target is visible to the attcker's owner
                OwnedBy affiliation = AnyEmpire
                OwnedBy affiliation = EnemyOf empire = Source.Owner
                VisibleToEmpire empire = Source.Owner
            ]
        ]
'''

COMBAT_TARGETS_NOT_DESTROYED_SHIP
'''        And [
            Ship
            Not Structure high = 0
        ]
'''

COMBAT_TARGETS_PLANET_WITH_DEFENSE
'''         And [
            Planet
            Or [
               Not Shields high = 0
               Not Defense high = 0
            ]
        ]
'''


// If you have a group of ships attacking another group of ships as optimisation you can select a number of primary subtargets (e.g. the most dangerous enemies)
// If you make the number too small you will hit the same target multiple times.
// If you make the number too high you will hit targets which you did not intend to hit primarily.
// COMBAT_TARGETS_WEAPON_SPREAD_HIT_ONCE calculates an number for NumberOf conditions for an attack group condition (ship attackers only) for wasting almost no shots.
//  @1@ attack group condition (Filter the universe for the same kind of targeting)
// This is based on the number of total shots of weapon of that part type used. Usage like:
//   MaximumNumberOf number = [[COMBAT_TARGETS_SPREAD(attack-group-condition)]]
// e.g. MaximumNumberOf number = [[COMBAT_TARGETS_SPREAD(And [ Ship OwnedBy empire = Source.Owner ])]]
// Takes a heuristical 20% extra spread by default
//
// 2019-02-27: currently will not match anything in count condition: Statistic Count condition = Fighter
// Possible extensions:
//   adapt Count so it can cound Fighters and implement a COMBAT_TARGETS_FIGHTER_SPREAD
//   implement COMBAT_TARGETS_WEAPON_SPREAD_KILL ... that calculates how many hits are necessary to kill the primary targets off
//   adapt spread to species modifiers
COMBAT_TARGETS_WEAPON_SPREAD_HIT_ONCE
'''( 1.2 * ShipPartMeter part = CurrentContent meter = SecondaryStat object = RootCandidate * Statistic Count condition = And [ Ship @1@ ] )'''
//spread * shots-per-current-ship-part                                                      * count of attackers in attack-group-condition
